const Viewer = ({ count }) => {
  return (
    <div>
      <div>현재 카운트 : </div>
      <h1>{count}</h1>
    </div>
  );
};

export default Viewer;

/**

이번 프로젝트를 통해 반드시 잡고 가야하는 몇가지 사실

1. 리액트에서 화면을 구성할때 여러개의 컴포넌트들이 서로 부모와 자식관계를 이루며 계층구조를 형성한다. 
- 여기서 부모 컴포넌트는 App, 자식 컴포넌트는 Viewer, Controller 이 있다. 

2. 특정 컴포넌트가 다른 컴포넌트에 데이터를 전달하려면 반드시 두 컴포넌트는 서로 부모-자식 관계를 가지고 있어야 한다.
- App ---[Props(O)]---> Viewer / App ---[Props(O)]---> Controller 
- Viewer ---[(X)]---> Controller / Controller ---[(X)]---> Viewer

3. 하나의 State를 여러 컴포넌트에서 관리하게 될 경우 이 State는 반드시 컴포넌트들의 공통 부모가 되는 곳에 만들어야 한다. 
- App (count, setCount) ---[count]---> Viewer
- App (count, setCount) ---[이벤트 핸들러]---> Controller
- State를 계층 구조상에서 위로 끌어올려 그 아래에 있는 컴포넌트들이 모두 공유할 수 있도록 만드는 방법
--> 리액트에서는 State Lifting (State 끌어 올리기) 라 한다. 

결론적으로 리액트에서는 Props라는 기능을 이용해서 부모에서 자식방향으로만 데이터를 전달 할 수 있다. 
그렇기 때문에 데이터들은 항상 위에서 아래로 하나의 방향으로만 흐르게 된다. 
이를 단방향 데이터 흐름이라고 부른다. 
단방향 데이터 흐름은 위에서 아래로만 내려가는 거라 파악하기 쉽고 직관적이다 라는 장점이 있다.
아무리 복잡한 어플리케이션을 설계하더라도 데이터를 보다 더 직관적으로 쉽게 관리할 수 있다. 
 */
